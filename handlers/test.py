import os
import random

from aiogram import Router, Bot, F, Dispatcher
from aiogram.exceptions import TelegramForbiddenError
from aiogram.filters import Command
from aiogram.filters import StateFilter
from aiogram.filters.chat_member_updated import \
    ChatMemberUpdatedFilter, MEMBER, KICKED, LEFT, RESTRICTED, ADMINISTRATOR, CREATOR
from aiogram.fsm.context import FSMContext, StorageKey
from aiogram.types import Message, ChatMemberUpdated

from keyboards.result import result_kb
from keyboards.start_test import kb
from keyboards.test import question
from utils.db import Database
from utils.functions import send_questions, result
from utils.states import QuestionsState

router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command(commands=['start']), StateFilter(None))
async def start_test(message: Message, bot: Bot, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
    user_channel_status = await bot.get_chat_member(chat_id=(os.getenv('ID_CHANNEL')), user_id=message.from_user.id)
    if user_channel_status.status in ['member', 'creator', 'administrator']:
        db = Database(os.getenv('DATABASE_NAME'))
        try:
            # –ü—Ä–æ–±—É–µ–º —É–∑–Ω–∞—Ç—å –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç
            user_passed = db.select_from_users_table(column_name='passed', user_id=message.from_user.id)
            db.update_user_data('passed', 0, user_id=message.from_user.id)
            if user_passed == 1:
                # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª
                await message.answer('–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç‚ò∫Ô∏è')
            else:
                # –ï—Å–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç
                db.add_user(user_id=message.from_user.id, status=user_channel_status.status, passed=0)
                await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?', reply_markup=kb)
                await state.set_state(QuestionsState.passed)
        except Exception as e:
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ passed (–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –≤ –ë–î)
            db.add_user(message.from_user.id, user_channel_status.status, 0)
            await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?', reply_markup=kb)
            await state.set_state(QuestionsState.passed)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
        await message.answer(f'–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª ‚ò∫Ô∏è: {os.getenv("LINK")}')


@router.chat_member(
    ChatMemberUpdatedFilter(member_status_changed=(KICKED | LEFT | RESTRICTED) >> (ADMINISTRATOR | CREATOR | MEMBER)
                            )
)
async def on_channel_join(event: ChatMemberUpdated, bot: Bot):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
    if event.chat.id == int(os.getenv('ID_CHANNEL')):
        try:
            await event.bot.send_message(chat_id=event.from_user.id,
                                         text="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–¥–ø–∏—Å–∫–æ–π!üéâ\n–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é —Ç–µ—Å—Ç–∞?",
                                         reply_markup=kb)
            db = Database(os.getenv('DATABASE_NAME'))
            db.add_user(event.from_user.id, event.new_chat_member.status, 0)
            dp = Dispatcher()
            state: FSMContext = FSMContext(
                storage=dp.storage,
                key=StorageKey(chat_id=event.from_user.id, user_id=event.from_user.id, bot_id=bot.id))
            await state.update_data()
            await state.set_state(QuestionsState.passed)
        except TelegramForbiddenError as e:
            print(f"–û—à–∏–±–∫–∞: –±–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")


@router.chat_member(
    ChatMemberUpdatedFilter(member_status_changed=(ADMINISTRATOR | CREATOR | MEMBER) >> (KICKED | LEFT | RESTRICTED)
                            )
)
async def channel_left(event: ChatMemberUpdated, bot: Bot):
    if event.chat.id == int(os.getenv('ID_CHANNEL')):
        try:
            await event.bot.send_message(chat_id=event.from_user.id,
                                         text="–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: https://t.me/mypervie31")
            db = Database(os.getenv('DATABASE_NAME'))
            db.add_user(event.from_user.id, event.new_chat_member.status, 0)
            dp = Dispatcher()
            state: FSMContext = FSMContext(
                storage=dp.storage,
                key=StorageKey(chat_id=event.from_user.id, user_id=event.from_user.id, bot_id=bot.id))
            await state.update_data()
            await state.set_state(QuestionsState.passed)
        except TelegramForbiddenError as e:
            print(f"–û—à–∏–±–∫–∞: –±–æ—Ç –±—ã–ª –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º. {e}")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞: {e}")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–∞–º–æ–≥–æ —Ç–µ—Å—Ç–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
@router.message(QuestionsState.passed and F.text.lower().in_(['–¥–∞', '—Ö–æ—á—É', '–∂–µ–ª–∞—é']))
async def positive_answer(message: Message, state: FSMContext):
    await message.answer(f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ! –í–≤–µ–¥–∏—Ç–µ –§–ò–û: \n"
                         f"(—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –ø–æ—ç—Ç–æ–º—É –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ –≤–≤–æ–¥–∏—Ç–µ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ‚ùóÔ∏è)")
    await state.set_state(QuestionsState.fio)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ—Ç–º–µ–Ω—É —Ç–µ—Å—Ç–∞
@router.message(QuestionsState.passed and F.text.lower().in_(['–Ω–µ—Ç', '–Ω–µ —Ö–æ—á—É', '–≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑']))
async def negative_answer(message: Message, state: FSMContext):
    await message.answer(text='–û—á–µ–Ω—å –∂–∞–ª—å üòî\n–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π /start')
    await state.clear()


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –§–ò–û. –†–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –§–ò–û
@router.message(QuestionsState.fio, lambda message: message.text == message.text.isalpha() or ' ' in message.text)
async def correct_fio(message: Message, state: FSMContext):
    db = Database(os.getenv('DATABASE_NAME'))
    db.update_user_data(column_name='fio', value=message.text, user_id=message.from_user.id)
    await message.answer('–ú–æ–ª–æ–¥–µ—Ü! –í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ –í—ã —É—á–∏—Ç–µ—Å—å (–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):')
    await state.set_state(QuestionsState.age)


# –ë–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
@router.message(QuestionsState.age, lambda message: message.text.isdigit() and 1 <= int(message.text) <= 11)
async def correct_class(message: Message, state: FSMContext):
    db = Database(os.getenv('DATABASE_NAME'))
    db.update_user_data(column_name='class', value=int(message.text), user_id=message.from_user.id)
    if 1 <= int(message.text) <= 4:
        await state.update_data(category=1)
    elif 5 <= int(message.text) <= 6:
        await state.update_data(category=2)
    elif 7 <= int(message.text) <= 11:
        await state.update_data(category=3)
    await message.answer('–ó–¥–æ—Ä–æ–≤–æ! –ù–∞—á–Ω—ë–º —Ç–µ—Å—Ç')
    await state.update_data(numbers=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
    data = (await state.get_data())
    category = data['category']
    numbers = data['numbers']
    random.shuffle(numbers)
    number_of_question = numbers.pop()
    await message.answer(
        text=f'<u>1-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(number=number_of_question, category=category)}</b>',
        reply_markup=await question(number_of_question, category=category))
    await state.update_data(numbers=numbers, used_numbers=[number_of_question])
    await state.set_state(QuestionsState.first)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –∫–ª–∞—Å—Å
@router.message(QuestionsState.age)
async def incorrect_class(message: Message):
    await message.answer('–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ –í—ã —É—á–∏—Ç–µ—Å—å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 11')


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –§–ò–û
@router.message(QuestionsState.fio)
async def incorrect_fio(message: Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –§–ò–û (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á - –ø—Ä–∏–º–µ—Ä)')


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.first)
async def first(message: Message, state: FSMContext):
    # save_first()
    db = Database(os.getenv('DATABASE_NAME'))
    db.update_user_data(column_name='first_question', value=message.text, user_id=message.from_user.id)
    data = (await state.get_data())
    category = data['category']
    numbers = data['numbers']
    number_of_question = numbers.pop()
    used_numbers = data['used_numbers']
    used_numbers.append(number_of_question)
    await message.answer(
        text=f'<u>2-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(number=number_of_question, category=category)}</b>',
        reply_markup=await question(number_of_question, category=category))
    await state.update_data(numbers=numbers,
                            used_numbers=used_numbers)
    await state.set_state(QuestionsState.second)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.second)
async def second(message: Message, state: FSMContext):
    # save_second()
    db = Database(os.getenv('DATABASE_NAME'))
    db.update_user_data(column_name='second_question', value=message.text, user_id=message.from_user.id)
    data = (await state.get_data())
    category = data['category']
    numbers = data['numbers']
    number_of_question = numbers.pop()
    used_numbers = data['used_numbers']
    used_numbers.append(number_of_question)
    await message.answer(
        text=f'<u>3-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(number=number_of_question, category=category)}</b>',
        reply_markup=await question(number_of_question, category=category))
    await state.update_data(numbers=numbers,
                            used_numbers=used_numbers)
    await state.set_state(QuestionsState.third)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.third)
async def third(message: Message, state: FSMContext):
    # save_third()
    db = Database(os.getenv('DATABASE_NAME'))
    db.update_user_data(column_name='third_question', value=message.text, user_id=message.from_user.id)
    data = (await state.get_data())
    category = data['category']
    numbers = data['numbers']
    number_of_question = numbers.pop()
    used_numbers = data['used_numbers']
    used_numbers.append(number_of_question)
    await message.answer(
        text=f'<u>4-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(number=number_of_question, category=category)}</b>',
        reply_markup=await question(number_of_question, category=category))
    await state.update_data(numbers=numbers,
                            used_numbers=used_numbers)
    await state.set_state(QuestionsState.fourth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.fourth)
async def fourth(message: Message, state: FSMContext):
    # save_fourth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.update_user_data(column_name='fourth_question', value=message.text, user_id=message.from_user.id)
    data = (await state.get_data())
    category = data['category']
    numbers = data['numbers']
    number_of_question = numbers.pop()
    used_numbers = data['used_numbers']
    used_numbers.append(number_of_question)
    await message.answer(
        text=f'<u>5-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(number=number_of_question, category=category)}</b>',
        reply_markup=await question(number_of_question, category=category))
    await state.update_data(numbers=numbers,
                            used_numbers=used_numbers)
    await state.set_state(QuestionsState.fifth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—è—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.fifth)
async def fifth(message: Message, state: FSMContext):
    # save_fifth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.update_user_data(column_name='fifth_question', value=message.text, user_id=message.from_user.id)
    data = (await state.get_data())
    category = data['category']
    numbers = data['numbers']
    number_of_question = numbers.pop()
    used_numbers = data['used_numbers']
    used_numbers.append(number_of_question)
    await message.answer(
        text=f'<u>6-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(number=number_of_question, category=category)}</b>',
        reply_markup=await question(number_of_question, category=category))
    await state.update_data(numbers=numbers,
                            used_numbers=used_numbers)
    await state.set_state(QuestionsState.sixth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–µ—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.sixth)
async def sixth(message: Message, state: FSMContext):
    # save_sixth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.update_user_data(column_name='sixth_question', value=message.text, user_id=message.from_user.id)
    data = (await state.get_data())
    category = data['category']
    numbers = data['numbers']
    number_of_question = numbers.pop()
    used_numbers = data['used_numbers']
    used_numbers.append(number_of_question)
    await message.answer(
        text=f'<u>7-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(number=number_of_question, category=category)}</b>',
        reply_markup=await question(number_of_question, category=category))
    await state.update_data(numbers=numbers,
                            used_numbers=used_numbers)
    await state.set_state(QuestionsState.seventh)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–¥—å–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.seventh)
async def seventh(message: Message, state: FSMContext):
    # save_seventh()
    db = Database(os.getenv('DATABASE_NAME'))
    db.update_user_data(column_name='seventh_question', value=message.text, user_id=message.from_user.id)
    data = (await state.get_data())
    category = data['category']
    numbers = data['numbers']
    number_of_question = numbers.pop()
    used_numbers = data['used_numbers']
    used_numbers.append(number_of_question)
    await message.answer(
        text=f'<u>8-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(number=number_of_question, category=category)}</b>',
        reply_markup=await question(number_of_question, category=category))
    await state.update_data(numbers=numbers,
                            used_numbers=used_numbers)
    await state.set_state(QuestionsState.eighth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—å–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.eighth)
async def eighth(message: Message, state: FSMContext):
    # save_eighth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.update_user_data(column_name='eighth_question', value=message.text, user_id=message.from_user.id)
    data = (await state.get_data())
    category = data['category']
    numbers = data['numbers']
    number_of_question = numbers.pop()
    used_numbers = data['used_numbers']
    used_numbers.append(number_of_question)
    await message.answer(
        text=f'<u>9-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(number=number_of_question, category=category)}</b>',
        reply_markup=await question(number_of_question, category=category))
    await state.update_data(numbers=numbers,
                            used_numbers=used_numbers)
    await state.set_state(QuestionsState.ninth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–≤—è—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.ninth)
async def ninth(message: Message, state: FSMContext):
    # save_ninth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.update_user_data(column_name='ninth_question', value=message.text, user_id=message.from_user.id)
    data = (await state.get_data())
    category = data['category']
    numbers = data['numbers']
    number_of_question = numbers.pop()
    used_numbers = data['used_numbers']
    used_numbers.append(number_of_question)
    await message.answer(
        text=f'<u>10-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(number=number_of_question, category=category)}</b>',
        reply_markup=await question(number_of_question, category=category))
    await state.update_data(numbers=numbers,
                            used_numbers=used_numbers)
    await state.set_state(QuestionsState.tenth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Å—è—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
@router.message(QuestionsState.tenth)
async def tenth(message: Message, state: FSMContext):
    # save_tenth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.update_user_data(column_name='tenth_question', value=message.text, user_id=message.from_user.id)
    db.update_user_data(column_name='passed', value=1, user_id=message.from_user.id)
    data = (await state.get_data())
    used_numbers = data['used_numbers']
    category = data['category']
    # –ó–∞–Ω–µ—Å–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (result - –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –±–∞–ª–ª–æ–≤)
    db.update_user_data(column_name='result', value=result(used_numbers, category, message.from_user.id)[0],
                        user_id=message.from_user.id)
    await message.answer(
        text=f'<b>–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b>ü•≥\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: <u>{result(used_numbers, category, message.from_user.id)[0]}/10</u>')
    await message.answer(
        text=f"–û—à–∏–±–∫–∏‚ùóÔ∏è:\n\n{result(used_numbers, category, message.from_user.id)[1]}",
        reply_markup=result_kb)
    await state.clear()
