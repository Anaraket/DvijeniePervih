import os

from aiogram import Router, Bot, F, Dispatcher
from aiogram.filters import Command
from aiogram.filters import StateFilter
from aiogram.filters.chat_member_updated import \
    ChatMemberUpdatedFilter, MEMBER, KICKED, LEFT, RESTRICTED, ADMINISTRATOR, CREATOR
from aiogram.fsm.context import FSMContext
from aiogram.fsm.context import StorageKey
from aiogram.types import Message, ChatMemberUpdated

from keyboards.result import result_kb
from keyboards.start_test import kb
from keyboards.test import question
from utils.db import Database
from utils.functions import send_questions, result, request
from utils.states import QuestionsState

router = Router()


# dp1 = Dispatcher()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(Command(commands=['start']))
async def command_start(message: Message):
    await message.answer(text="üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /test - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
@router.message(F.text.lower().in_(['/test', '–ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', '—Ç–µ—Å—Ç']), StateFilter(None))
async def check_subscription(message: Message, bot: Bot, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
    user_channel_status = await bot.get_chat_member(chat_id=(os.getenv('ID_CHANNEL')), user_id=message.from_user.id)
    if user_channel_status.status in ['member', 'creator', 'administrator']:
        db = Database(os.getenv('DATABASE_NAME'))
        try:
            # –ü—Ä–æ–±—É–µ–º —É–∑–Ω–∞—Ç—å –ø—Ä–æ—Ö–æ–¥–∏–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ—Å—Ç
            users, *rest = db.select_passed(message.from_user.id)[0]
            db.add_passed(0, message.from_user.id)
            if users == 1:
                # –ï—Å–ª–∏ —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª
                await message.answer('–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç')
            else:
                # –ï—Å–ª–∏ –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç
                db.add_user(message.from_user.id, user_channel_status.status, 0)
                await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?', reply_markup=kb)
                await state.set_state(QuestionsState.passed)
        except:
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ—Å—Ç–∞—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ passed (–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—â—ë –Ω–µ—Ç –≤ –ë–î)
            db.add_user(message.from_user.id, user_channel_status.status, 0)
            await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?', reply_markup=kb)
            await state.set_state(QuestionsState.passed)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª
        await message.answer(f'–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: {os.getenv('LINK')}')
        # await state.set_state(QuestionsState.passed)


@router.chat_member(ChatMemberUpdatedFilter(
    member_status_changed=
    (KICKED | LEFT | RESTRICTED)
    >>
    (ADMINISTRATOR | CREATOR | MEMBER)
)
)
async def on_channel_join(event: ChatMemberUpdated, state: FSMContext, bot: Bot):
    if event.chat.id == int(os.getenv('ID_CHANNEL')):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
        await event.bot.send_message(chat_id=event.from_user.id,
                                     text="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–¥–ø–∏—Å–∫–æ–π!\n–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é —Ç–µ—Å—Ç–∞?", reply_markup=kb)
        dp = Dispatcher()
        state: FSMContext = FSMContext(
            storage=dp.storage,
            key=StorageKey(chat_id=event.from_user.id, user_id=event.from_user.id, bot_id=bot.id))
        await state.update_data()
        await state.set_state(QuestionsState.passed)


# # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ–æ–±—â–µ—Å—Ç–≤–µ –í–ö–æ–Ω—Ç–∞–∫—Ç–µ
# def is_user_subscribed(user_id):
#     vk_session = vk_api.VkApi(token=os.getenv('VK_ACCESS_TOKEN'))
#     vk = vk_session.get_api()
#     try:
#         response = vk.groups.isMember(group_id=os.getenv('VK_GROUP_ID'), user_id=user_id)
#         return response['member'] == 1  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º True, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –∏–Ω–∞—á–µ False
#     except vk_api.exceptions.ApiError:
#         return False  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ–π –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ API

# @router.chat_member(ChatMemberUpdatedFilter(
#     member_status_changed=
#     (KICKED | LEFT | RESTRICTED)
#     >>
#     (ADMINISTRATOR | CREATOR | MEMBER)
# )
# )
# async def on_channel_join(event: ChatMemberUpdated):
#     if event.chat.id == int(os.getenv('ID_CHANNEL')) and is_user_subscribed(event.from_user.id):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
#         await event.bot.send_message(chat_id=event.from_user.id,
#                                      text="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–¥–ø–∏—Å–∫–æ–π!\n–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é —Ç–µ—Å—Ç–∞?", reply_markup=kb)

# @router.chat_member(ChatMemberUpdatedFilter(
#     member_status_changed=
#     (KICKED | LEFT | RESTRICTED)
#     >>
#     (ADMINISTRATOR | CREATOR | MEMBER)
# )
# )
# async def on_channel_join(event: ChatMemberUpdated):
#     if event.chat.id == int(os.getenv('ID_CHANNEL')):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç –Ω—É–∂–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
#         await event.bot.send_message(chat_id=event.from_user.id,
#                                      text="–ü–æ–∑–¥—Ä–∞–≤–ª—è—é —Å –ø–æ–¥–ø–∏—Å–∫–æ–π!\n–ü—Ä–∏—Å—Ç—É–ø–∏–º –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é —Ç–µ—Å—Ç–∞?", reply_markup=kb)


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–∞–º–æ–≥–æ —Ç–µ—Å—Ç–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
@router.message(QuestionsState.passed and F.text.lower().in_(['–¥–∞', '—Ö–æ—á—É', '–∂–µ–ª–∞—é']))
async def pozitive_answer(message: Message, state: FSMContext):
    await message.answer(f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    await state.set_state(QuestionsState.fio)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ—Ç–º–µ–Ω—É —Ç–µ—Å—Ç–∞
@router.message(QuestionsState.passed and F.text.lower().in_(['–Ω–µ—Ç', '–Ω–µ —Ö–æ—á—É', '–≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑', '–Ω–µ–µ—Ç']))
async def negative_answer(message: Message, state: FSMContext):
    await message.answer(text='–û—á–µ–Ω—å –∂–∞–ª—å :(\n–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π "/test"')
    await state.clear()


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –§–ò–û. –†–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –§–ò–û
@router.message(QuestionsState.fio, lambda message: message.text == message.text.isalpha() or ' ' in message.text)
async def correct_fio(message: Message, state: FSMContext):
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_fio(fio=message.text, user_id=message.from_user.id)
    await message.answer('–ú–æ–ª–æ–¥–µ—Ü! –í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —Ç—ã —É—á–∏—à—å—Å—è:')
    await state.set_state(QuestionsState.age)


# –ë–æ—Ç —Ä–µ–∞–≥–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
@router.message(QuestionsState.age, lambda message: message.text.isdigit() and 1 <= int(message.text) <= 11)
async def correct_age(message: Message, state: FSMContext):
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_class(age=int(message.text), user_id=message.from_user.id)
    await message.answer('–ó–¥–æ—Ä–æ–≤–æ! –ù–∞—á–Ω—ë–º —Ç–µ—Å—Ç')
    await message.answer(text=f'<u>1-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(1)}</b>', reply_markup=await question(1))
    await state.set_state(QuestionsState.first)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç
@router.message(QuestionsState.age)
async def incorrect_age(message: Message):
    await message.answer('–í –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —Ç—ã —É—á–∏—à—å—Å—è?. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 11')


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è
@router.message(QuestionsState.fio)
async def incorrect_fio(message: Message):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –§–ò–û (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á - –ø—Ä–∏–º–µ—Ä)')


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.first)
async def first(message: Message, state: FSMContext):
    # save_first()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_first(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>2-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(2)}</b>', reply_markup=await question(2))
    await state.set_state(QuestionsState.second)


# # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.second)
async def second(message: Message, state: FSMContext):
    # save_second()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_second(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>3-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(3)}</b>', reply_markup=await question(3))
    await state.set_state(QuestionsState.third)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.third)
async def third(message: Message, state: FSMContext):
    # save_third()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_third(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>4-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(4)}</b>', reply_markup=await question(4))
    await state.set_state(QuestionsState.fourth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.fourth)
async def fourth(message: Message, state: FSMContext):
    # save_fourth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_fourth(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>5-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(5)}</b>', reply_markup=await question(5))
    await state.set_state(QuestionsState.fifth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—è—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.fifth)
async def fifth(message: Message, state: FSMContext):
    # save_fifth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_fifth(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>6-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(6)}</b>', reply_markup=await question(6))
    await state.set_state(QuestionsState.sixth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–µ—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.sixth)
async def sixth(message: Message, state: FSMContext):
    # save_sixth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_sixth(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>7-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(7)}</b>', reply_markup=await question(7))
    await state.set_state(QuestionsState.seventh)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–¥—å–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.seventh)
async def seventh(message: Message, state: FSMContext):
    # save_seventh()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_seventh(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>8-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(8)}</b>', reply_markup=await question(8))
    await state.set_state(QuestionsState.eighth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—å–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.eighth)
async def eighth(message: Message, state: FSMContext):
    # save_eighth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_eighth(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>9-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(9)}</b>', reply_markup=await question(9))
    await state.set_state(QuestionsState.ninth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–≤—è—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.ninth)
async def ninth(message: Message, state: FSMContext):
    # save_ninth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_ninth(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>10-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(10)}</b>', reply_markup=await question(10))
    await state.set_state(QuestionsState.tenth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Å—è—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
@router.message(QuestionsState.tenth)
async def tenth(message: Message, state: FSMContext):
    # save_tenth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_tenth(answer=message.text, user_id=message.from_user.id)
    db.add_passed(1, message.from_user.id)
    await state.clear()
    # –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç (result - –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ –±–∞–ª–ª–æ–≤)
    db.add_result(answer=result(db.select_columns(request, message.from_user.id)), user_id=message.from_user.id)
    await message.answer(
        text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result(db.select_columns(request, message.from_user.id))}/10',
        reply_markup=result_kb)
