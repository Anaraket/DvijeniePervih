from aiogram import Router, Bot, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from keyboards.start_test import kb
from utils.states import QuestionsState
from keyboards.test import question
from keyboards.result import result_kb
from aiogram.types import Message
from aiogram.filters import Command
import os
from utils.db import Database
from utils.functions import send_questions, result

router = Router()


# # –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–æ–ø—Ä–æ—Å –∏–∑ —Å–ø–∏—Å–∫–∞
# def send_questions(number: int):
#     message = questions[number - 1]["question"]
#     return message


# –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–µ–¥—ë–Ω–Ω–æ–≥–æ –§–ò–û
def fio_correct(message: Message):
    return message.text == message.text.isalpha() or ' ' in message.text


# def result(answers: list):
#     score = 0
#     user_answers = [item[4:14] for item in answers]
#     for idx, values in enumerate(questions, start=1):
#         if values['correct_answer'] in user_answers[0]:
#             score += 1
#     return score


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –î–ë
@router.message(Command(commands=['start']))
async def command_start(message: Message, bot: Bot):
    await bot.send_message(chat_id=message.from_user.id, text="üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞")


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /test - –∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
@router.message(F.text.lower().in_(['/test', '–ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç', '—Ç–µ—Å—Ç']), StateFilter(None))
async def check_subscription(message: Message, bot: Bot, state: FSMContext):
    user_channel_status = await bot.get_chat_member(chat_id=-1002004860176, user_id=message.from_user.id)
    if user_channel_status.status not in ['left', 'kicked']:
        db = Database(os.getenv('DATABASE_NAME'))
        users, *rest = db.select_passed(message.from_user.id)[0]
        db.add_passed(0, message.from_user.id)
        if users == 1:
            await message.answer('–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç')
        else:
            db.add_user(message.from_user.id, user_channel_status.status, 0)
            await message.answer('–ñ–µ–ª–∞–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç?', reply_markup=kb)
            await state.set_state(QuestionsState.passed)
    else:
        await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª: https://t.me/+iv10xEEruWNmOWJi')


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–∞–º–æ–≥–æ —Ç–µ—Å—Ç–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
@router.message(F.text.lower().in_(['–¥–∞', '—Ö–æ—á—É', '–∂–µ–ª–∞—é']), QuestionsState.passed)
async def pozitive_answer(message: Message, state: FSMContext):
    await message.answer(f"–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ!\n–í–≤–µ–¥–∏—Ç–µ –§–ò–û:")
    await state.set_state(QuestionsState.fio)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ—Ç–º–µ–Ω—É —Ç–µ—Å—Ç–∞
@router.message(QuestionsState.passed, F.text.lower().in_(['–Ω–µ—Ç', '–Ω–µ —Ö–æ—á—É', '–≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑', '–Ω–µ–µ—Ç']))
async def negative_answer(message: Message, state: FSMContext):
    await message.answer(text='–û—á–µ–Ω—å –∂–∞–ª—å :(\n–í—ã –≤—Å–µ–≥–¥–∞ —Å–º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç, –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞–≤—à–∏—Å—å –∫–æ–º–∞–Ω–¥–æ–π "/test"')
    await state.clear()


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–≤–æ–¥–∞ –§–ò–û
@router.message(QuestionsState.fio, fio_correct)
async def correct_fio(message: Message, state: FSMContext):
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_fio(fio=message.text, user_id=message.from_user.id)
    await state.update_data(fio=message.text)
    await message.answer('–ö–ª–∞—Å—Å! –ù–∞—á–Ω—ë–º —Ç–µ—Å—Ç')
    await message.answer(text=f'<u>1-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(1)}</b>', reply_markup=await question(1))
    await state.set_state(QuestionsState.first)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥—ë–Ω–Ω–æ–µ –∏–º—è
@router.message(QuestionsState.fio)
async def incorrect_fio(message: Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏—Ç–µ –§–ò–û (–ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤–∏—á - –ø—Ä–∏–º–µ—Ä)')


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.first)
async def first(message: Message, state: FSMContext):
    # save_first()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_first(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>2-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(2)}</b>', reply_markup=await question(2))
    await state.set_state(QuestionsState.second)


# # –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Ç–æ—Ä–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.second)
async def second(message: Message, state: FSMContext):
    # save_second()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_second(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>3-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(3)}</b>', reply_markup=await question(3))
    await state.set_state(QuestionsState.third)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ç—Ä–µ—Ç—å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.third)
async def third(message: Message, state: FSMContext):
    # save_third()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_third(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>4-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(4)}</b>', reply_markup=await question(4))
    await state.set_state(QuestionsState.fourth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —á–µ—Ç–≤—ë—Ä—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.fourth)
async def fourth(message: Message, state: FSMContext):
    # save_fourth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_fourth(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>5-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(5)}</b>', reply_markup=await question(5))
    await state.set_state(QuestionsState.fifth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—è—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.fifth)
async def fifth(message: Message, state: FSMContext):
    # save_fifth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_fifth(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>6-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(6)}</b>', reply_markup=await question(6))
    await state.set_state(QuestionsState.sixth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —à–µ—Å—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.sixth)
async def sixth(message: Message, state: FSMContext):
    # save_sixth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_sixth(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>7-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(7)}</b>', reply_markup=await question(7))
    await state.set_state(QuestionsState.seventh)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–µ–¥—å–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.seventh)
async def seventh(message: Message, state: FSMContext):
    # save_seventh()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_seventh(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>8-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(8)}</b>', reply_markup=await question(8))
    await state.set_state(QuestionsState.eighth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤–æ—Å—å–º–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.eighth)
async def eighth(message: Message, state: FSMContext):
    # save_eighth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_eighth(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>9-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(9)}</b>', reply_markup=await question(9))
    await state.set_state(QuestionsState.ninth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ–≤—è—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@router.message(QuestionsState.ninth)
async def ninth(message: Message, state: FSMContext):
    # save_ninth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_ninth(answer=message.text, user_id=message.from_user.id)
    await message.answer(text=f'<u>10-–π –≤–æ–ø—Ä–æ—Å:</u>\n\n<b>{send_questions(10)}</b>', reply_markup=await question(10))
    await state.set_state(QuestionsState.tenth)


# –ü–µ—Ä–µ—Ö–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–µ—Å—è—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
@router.message(QuestionsState.tenth)
async def tenth(message: Message, state: FSMContext):
    # save_tenth()
    db = Database(os.getenv('DATABASE_NAME'))
    db.add_tenth(answer=message.text, user_id=message.from_user.id)
    db.add_passed(1, message.from_user.id)
    await state.clear()
    # –í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await message.answer(
        text=f'–ü–æ–∑–¥—Ä–∞–≤–ª—è—é!\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {result(db.select_all_answers(message.from_user.id))}/10',
        reply_markup=result_kb)
