import os

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from aiogram.types import Message

from utils.db import Database
from utils.functions import show_mistakes
from utils.sertificate_create import seftificate

router = Router()


# –•—ç–Ω–¥–ª–µ—Ä, –Ω–∞ –∫–Ω–æ–ø–∫—É "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—à–∏–±–∫–∏" –∏ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ—à–∏–±–∫–∞–º–∏
@router.message(F.text.lower().in_(['–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—à–∏–±–∫–∏']))
async def show_mistakes_button(message: Message):
    answer_text = show_mistakes(message.from_user.id)
    await message.answer(text=answer_text)


# –ù–µ–¥–æ–ø–∏—Å–∞–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ø–æ–ª—É—á–µ–Ω–∏–µ–º —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
@router.message(F.text.lower().in_(['–ø–æ–ª—É—á–∏—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç']))
async def get_certificate(message: Message):
    db = Database(os.getenv('DATABASE_NAME'))
    seftificate(fio=db.select_columns(column_names=['fio'], user_id=message.from_user.id),
                result=db.select_columns(column_names=['result'], user_id=message.from_user.id))
    cat = FSInputFile(path=
                      f"C:/Users/user/PycharmProjects/DvijeniePervih/utils/upload/{(db.select_columns(['fio'], message.from_user.id))[0]}.pdf")
    await message.answer_document(document=cat, caption='–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç!')


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/channel" –∏ —Ñ—É–Ω–∫—Ü–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è—é—â–∞—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª
# (—Å—Å—ã–ª–∫–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ —Ñ–∞–π–ª–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ (.env)
@router.message(F.text.lower().in_(['/channel']))
async def get_chanel(message: Message, state: FSMContext):
    await message.answer(os.getenv('LINK'))


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É "/help" –∏ —Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–¥–∞—é—â–∞—è –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –∏ –∫–æ–º–∞–Ω–¥–∞—Ö
@router.message(F.text.lower().in_(['/help']))
async def get_help(message: Message):
    await message.answer(text='–ù–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –¥–∞—ë—Ç—Å—è –æ–¥–Ω–∞ –ø–æ–ø—ã—Ç–∫–∞, –±–µ–∑ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. '
                              '–ü–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞ –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—à–∏–±–∫–∏ –∏ —Å–∫–∞—á–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç\n'
                              '/start - —ç—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–ø–∏—Å—ã–≤–∞—é—â–µ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –±–æ—Ç–∞\n'
                              '/test - –∫–æ–º–∞–Ω–¥–∞, –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ï—ë —Ç–∞–∫–∂–µ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª '
                              '(–¥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞)\n'
                              '/help - –í—ã —Å–µ–π—á–∞—Å –∑–¥–µ—Å—å üòä\n'
                              '/channel - –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞–Ω–∞–ª')


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@router.message(F.text)
async def else_message(message: Message):
    await message.answer('–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã :(\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ "/start", "/test –∏–ª–∏ /help')
